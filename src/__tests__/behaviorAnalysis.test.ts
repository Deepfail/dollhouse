import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import { AIService } from '../lib/aiService';
import { analyzeBehavior } from '../lib/behaviorAnalysis';
import { Character, ChatMessage } from '../types';

const createTestCharacter = (): Character => ({
  id: 'char-1',
  name: 'Isla',
  gender: 'female',
  age: 22,
  description: 'Test character',
  personality: 'cheerful',
  appearance: 'athletic',
  stats: {
    love: 10,
    happiness: 10,
    wet: 5,
    willing: 5,
    selfEsteem: 50,
    loyalty: 10,
    fight: 5,
    stamina: 20,
    pain: 10,
    experience: 0,
    level: 1
  },
  skills: {
    hands: 5,
    mouth: 5,
    missionary: 5,
    doggy: 5,
    cowgirl: 5
  },
  role: 'companion',
  personalities: ['cheerful'],
  features: ['freckles'],
  classes: [],
  unlocks: [],
  rarity: 'common',
  prompts: {
    system: 'Stay in character.',
    personality: 'Cheerful and caring.',
    background: 'Enjoys spending time with the user.'
  },
  conversationHistory: [],
  memories: [],
  preferences: {},
  relationships: {},
  progression: {
    level: 1,
    nextLevelExp: 100,
    unlockedFeatures: [],
    achievements: [],
    relationshipStatus: 'stranger',
    affection: 5,
    trust: 5,
    intimacy: 0,
    dominance: 50,
    jealousy: 0,
    possessiveness: 0,
    sexualExperience: 0,
    kinks: [],
    limits: [],
    fantasies: [],
    unlockedPositions: [],
    unlockedOutfits: [],
    unlockedToys: [],
    unlockedScenarios: [],
    relationshipMilestones: [],
    sexualMilestones: [],
    significantEvents: [],
    storyChronicle: [],
    memorableEvents: [],
    bonds: {},
    sexualCompatibility: {
      overall: 0,
      kinkAlignment: 0,
      stylePreference: 0
    },
    userPreferences: {
      likes: [],
      dislikes: [],
      turnOns: [],
      turnOffs: []
    }
  },
  createdAt: new Date(),
  updatedAt: new Date(),
  autoGenerated: false
});

const createMessages = (): ChatMessage[] => [
  {
    id: 'm-1',
    characterId: undefined,
    content: 'Hey there, I really appreciate you.',
    timestamp: new Date(),
    type: 'text'
  },
  {
    id: 'm-2',
    characterId: 'char-1',
    content: 'I love spending time with you!',
    timestamp: new Date(),
    type: 'text'
  }
];

describe('behaviorAnalysis', () => {
  beforeEach(() => {
    vi.restoreAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it('parses AI output and clamps adjustments safely', async () => {
    const character = createTestCharacter();
    const messages = createMessages();

    const jsonBlock = `Here is what I found:\n{\n  "conversationSummary": "The user offered a warm compliment.",\n  "followUpSuggestions": ["Share a specific compliment"],\n  "characters": [\n    {\n      "id": "char-1",\n      "behavior": "affectionate",\n      "confidence": 0.92,\n      "summary": "Isla glowed after the praise.",\n      "tags": ["warm", "open"],\n      "signals": { "affection": 15, "trust": 4 },\n      "statAdjustments": {\n        "stats": { "love": 12, "experience": 200 },\n        "progression": { "affection": 14 }\n      },\n      "memories": ["Enjoyed being appreciated"],\n      "recommendedActions": ["Ask about her day"]\n    }\n  ]\n}\nThanks!`;

    vi.spyOn(AIService, 'generateResponse').mockResolvedValue(jsonBlock);

    const result = await analyzeBehavior({
      sessionId: 'session-1',
      messages,
      characters: [character],
      latestUserMessage: messages[0].content
    });

    expect(result.conversationSummary).toContain('warm compliment');
    expect(result.followUpSuggestions).toContain('Share a specific compliment');
    expect(result.adjustments).toHaveLength(1);

    const adjustment = result.adjustments[0];
    expect(adjustment.behavior).toBe('affectionate');
    expect(adjustment.signals.affection).toBe(12);
    expect(adjustment.statAdjustments.stats?.experience).toBe(12);
    expect(adjustment.statAdjustments.progression?.affection).toBe(12);
    expect(adjustment.recommendedActions).toContain('Ask about her day');
  });

  it('falls back to heuristic assessment when AI output is invalid', async () => {
    const character = createTestCharacter();
    const messages = createMessages();

    vi.spyOn(AIService, 'generateResponse').mockResolvedValue('This is not JSON at all.');

    const result = await analyzeBehavior({
      sessionId: 'session-2',
      messages,
      characters: [character],
      latestUserMessage: messages[0].content
    });

    expect(result.adjustments).toHaveLength(1);
    expect(result.adjustments[0].behavior).toBe('affectionate');
    expect(result.followUpSuggestions[0]).toContain('compliment');
  });
});
