import { getDb, saveDatabase } from '../lib/db';
import { uuid } from '../lib/uuid';

export async function listCharacters() {
  console.log('üîç listCharacters called');
  try {
    const { db } = await getDb();
    console.log('‚úÖ Got database connection');
    const rows: any[] = [];
    db.exec({
      sql: 'SELECT * FROM characters ORDER BY updated_at DESC',
      rowMode: 'object',
      callback: (r: any) => rows.push(r)
    });
    console.log('‚úÖ Query executed, found', rows.length, 'characters');
    // Transform database rows to Character interface
    const result = rows.map(row => {
      // Safely parse JSON fields, ensuring they are arrays
      const parseJsonArray = (jsonStr: string | null, defaultValue: any[] = []) => {
        if (!jsonStr) return defaultValue;
        try {
          const parsed = JSON.parse(jsonStr);
          return Array.isArray(parsed) ? parsed : defaultValue;
        } catch {
          return defaultValue;
        }
      };

      const traits = parseJsonArray(row.traits_json);
      const tags = parseJsonArray(row.tags_json);

      return {
        id: row.id,
        name: row.name,
        description: row.bio || '',
        personality: traits.join(', ') || 'friendly',
        appearance: row.bio || 'A character',
        avatar: row.avatar_path,
        roomId: undefined,

        // Default stats
        stats: {
          love: 50,
          happiness: 50,
          wet: 0,
          willing: 50,
          selfEsteem: 50,
          loyalty: 50,
          fight: 20,
          stamina: 50,
          pain: 30,
          experience: 0,
          level: 1
        },

        // Default skills
        skills: {
          hands: 20,
          mouth: 20,
          missionary: 20,
          doggy: 20,
          cowgirl: 20
        },

        // Basic attributes
        role: 'companion',
        personalities: traits,
        features: tags,
        classes: [],
        unlocks: [],
        rarity: 'common' as const,
        specialAbility: undefined,
        preferredRoomType: 'shared',
        imageDescription: row.bio,

        // Basic physical stats
        physicalStats: {
          hairColor: 'brown',
          eyeColor: 'brown',
          height: '5\'6"',
          weight: '130 lbs',
          skinTone: 'fair'
        },

        // AI Configuration
        prompts: {
          system: row.system_prompt || 'You are a friendly companion.',
          personality: row.bio || 'A friendly character',
          background: row.bio || 'A character in the dollhouse'
        },

        // Interaction data
        lastInteraction: undefined,
        conversationHistory: [],
        memories: [],
        preferences: {},
        relationships: {},
        progression: {
          level: 1,
          nextLevelExp: 100,
          unlockedFeatures: [],
          achievements: [],
          relationshipStatus: 'stranger' as const,
          affection: 50,
          trust: 50,
          intimacy: 20,
          dominance: 50,
          jealousy: 30,
          possessiveness: 40,
          sexualExperience: 0,
          kinks: [],
          limits: [],
          fantasies: [],
          unlockedPositions: [],
          unlockedOutfits: [],
          unlockedToys: [],
          unlockedScenarios: [],
          relationshipMilestones: [],
          sexualMilestones: [],
          significantEvents: [],
          storyChronicle: [],
          currentStoryArc: undefined,
          memorableEvents: [],
          bonds: {},
          sexualCompatibility: {
            overall: 50,
            kinkAlignment: 50,
            stylePreference: 50
          },
          userPreferences: {
            likes: [],
            dislikes: [],
            turnOns: [],
            turnOffs: []
          }
        },

        createdAt: new Date(parseInt(row.created_at)),
        updatedAt: new Date(parseInt(row.updated_at)),
        autoGenerated: false
      };
    });
    console.log('‚úÖ Transformation complete, returning', result.length, 'characters');
    return result;
  } catch (error) {
    console.error('‚ùå listCharacters failed:', error);
    throw error;
  }
}

export async function createCharacter(input: { name: string; traits?: any; tags?: any; bio?: string; system_prompt?: string; avatar_path?: string; }) {
  const { db } = await getDb();
  const now = Date.now();
  const id = uuid();
  db.exec({
    sql: `INSERT INTO characters (id,name,avatar_path,bio,traits_json,tags_json,system_prompt,created_at,updated_at)
          VALUES (?,?,?,?,?,?,?, ?, ?)`,
    bind: [id, input.name, input.avatar_path ?? null, input.bio ?? '', JSON.stringify(input.traits ?? []),
           JSON.stringify(input.tags ?? []), input.system_prompt ?? '', now, now]
  });
  await saveDatabase();
  return { id };
}

export async function updateCharacter(id: string, patch: Partial<{ name:string; bio:string; traits:any; tags:any; system_prompt:string; avatar_path:string; }>) {
  const { db } = await getDb();
  const now = Date.now();

  // Get the raw database row
  const rows: any[] = [];
  db.exec({
    sql: 'SELECT * FROM characters WHERE id = ?',
    bind: [id],
    rowMode: 'object',
    callback: (r: any) => rows.push(r)
  });
  const row = rows[0];

  if (!row) {
    throw new Error(`Character with id ${id} not found`);
  }

  const name = patch.name ?? row.name;
  const bio = patch.bio ?? row.bio ?? '';
  
  // Safely handle traits and tags, ensuring they are arrays
  const ensureArray = (value: any) => {
    if (Array.isArray(value)) return value;
    if (typeof value === 'object' && value !== null) return Object.values(value);
    return [];
  };
  
  const currentTraits = (() => {
    try {
      const parsed = JSON.parse(row.traits_json ?? '[]');
      return Array.isArray(parsed) ? parsed : [];
    } catch {
      return [];
    }
  })();
  
  const currentTags = (() => {
    try {
      const parsed = JSON.parse(row.tags_json ?? '[]');
      return Array.isArray(parsed) ? parsed : [];
    } catch {
      return [];
    }
  })();
  
  const traits = patch.traits !== undefined ? ensureArray(patch.traits) : currentTraits;
  const tags = patch.tags !== undefined ? ensureArray(patch.tags) : currentTags;
  
  const sys = patch.system_prompt ?? row.system_prompt ?? '';
  const avatar = patch.avatar_path ?? row.avatar_path ?? null;

  db.exec({
    sql: `UPDATE characters SET name=?, avatar_path=?, bio=?, traits_json=?, tags_json=?, system_prompt=?, updated_at=? WHERE id=?`,
    bind: [name, avatar, bio, JSON.stringify(traits), JSON.stringify(tags), sys, now, id]
  });
  await saveDatabase();
}

export async function deleteCharacter(id: string) {
  const { db } = await getDb();
  db.exec({
    sql: `DELETE FROM characters WHERE id=?`,
    bind: [id]
  });
  await saveDatabase();
}
