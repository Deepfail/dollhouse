/* eslint-disable @typescript-eslint/no-explicit-any */
import { v4 as uuidv4 } from 'uuid';
import { StorageAdapter } from '../storage/adapters';
import { Character } from '../types';

export async function listCharacters(): Promise<Character[]> {
  console.log('üîç listCharacters called (new storage)');
  try {
    const legacyCharacters = await StorageAdapter.getCharacters();
    console.log('‚úÖ Query executed, found', legacyCharacters.length, 'characters');
    
    // Transform to Character interface
    const result = legacyCharacters.map(char => {
      const traits = char.personality ? char.personality.split(', ') : ['friendly'];
      
      return {
        id: char.id,
        name: char.name,
        description: char.description || '',
        personality: char.personality || 'friendly',
        appearance: char.appearance || 'A character',
        avatar: char.avatar,
        roomId: undefined,

        // Default stats
        stats: {
          love: 50,
          happiness: 50,
          wet: 0,
          willing: 50,
          selfEsteem: 50,
          loyalty: 50,
          fight: 20,
          stamina: 50,
          pain: 30,
          experience: 0,
          level: 1
        },

        // Default skills
        skills: {
          hands: 20,
          mouth: 20,
          missionary: 20,
          doggy: 20,
          cowgirl: 20
        },

        // Basic attributes
        role: 'companion' as const,
        personalities: traits,
        features: [],
        classes: [],
        unlocks: [],
        rarity: 'common' as const,
        specialAbility: undefined,
        preferredRoomType: 'shared',
        imageDescription: char.description,

        // Basic physical stats
        physicalStats: {
          hairColor: 'brown',
          eyeColor: 'brown',
          height: '5\'6"',
          weight: '130 lbs',
          skinTone: 'fair'
        },

        // AI Configuration
        prompts: {
          system: 'You are a friendly companion.',
          description: char.description || 'An alluring presence in the Dollhouse.',
          personality: char.personality || 'A friendly character',
          background: char.description || 'A character in the Dollhouse.',
          appearance: char.description || 'Elegant, confident, and fully adult in stature.',
          responseStyle: 'Warm, flirty, and attentive to the user.',
          originScenario: `${char.name} met the user as an adult and keeps returning to the Dollhouse for the chemistry they share.`
        },

        // Interaction data
        lastInteraction: undefined,
        conversationHistory: [],
        memories: [],
        preferences: {},
        relationships: {},
        progression: {
          level: 1,
          nextLevelExp: 100,
          unlockedFeatures: [],
          achievements: [],
          relationshipStatus: 'stranger' as const,
          affection: 50,
          trust: 50,
          intimacy: 20,
          dominance: 50,
          jealousy: 30,
          possessiveness: 40,
          sexualExperience: 0,
          kinks: [],
          limits: [],
          fantasies: [],
          unlockedPositions: [],
          unlockedOutfits: [],
          unlockedToys: [],
          unlockedScenarios: [],
          relationshipMilestones: [],
          sexualMilestones: [],
          significantEvents: [],
          storyChronicle: [],
          currentStoryArc: undefined,
          memorableEvents: [],
          bonds: {},
          sexualCompatibility: {
            overall: 50,
            kinkAlignment: 50,
            stylePreference: 50
          },
          userPreferences: {
            likes: [],
            dislikes: [],
            turnOns: [],
            turnOffs: []
          }
        },

        createdAt: char.createdAt || new Date(),
        updatedAt: char.updatedAt || new Date(),
        autoGenerated: false
      };
    });
    
    console.log('‚úÖ Transformation complete, returning', result.length, 'characters');
    return result;
  } catch (error) {
    console.error('‚ùå listCharacters failed:', error);
    throw error;
  }
}

export async function createCharacter(input: { 
  name: string; 
  traits?: any; 
  tags?: any; 
  bio?: string; 
  system_prompt?: string; 
  avatar_path?: string; 
}): Promise<{ id: string }> {
  console.log('üîß createCharacter called (new storage):', input);
  
  try {
    const id = await StorageAdapter.createCharacter({
      id: uuidv4(),
      name: input.name,
      description: input.bio || '',
      personality: Array.isArray(input.traits) ? input.traits.join(', ') : '',
      appearance: input.bio || '',
      avatar: input.avatar_path || ''
    });
    
    console.log('‚úÖ Character created with ID:', id);
    return { id };
  } catch (error) {
    console.error('‚ùå createCharacter failed:', error);
    throw error;
  }
}

export async function updateCharacter(id: string, patch: Partial<{ 
  name: string; 
  bio: string; 
  traits: any; 
  tags: any; 
  system_prompt: string; 
  avatar_path: string; 
}>): Promise<void> {
  console.log('üîß updateCharacter called (new storage):', id, patch);
  
  try {
    await StorageAdapter.updateCharacter(id, {
      name: patch.name,
      description: patch.bio,
      personality: Array.isArray(patch.traits) ? patch.traits.join(', ') : patch.traits,
      avatar: patch.avatar_path
    });
    
    console.log('‚úÖ Character updated:', id);
  } catch (error) {
    console.error('‚ùå updateCharacter failed:', error);
    throw error;
  }
}

export async function deleteCharacter(id: string): Promise<void> {
  console.log('üîß deleteCharacter called (new storage):', id);
  
  try {
    await StorageAdapter.deleteCharacter(id);
    console.log('‚úÖ Character deleted:', id);
  } catch (error) {
    console.error('‚ùå deleteCharacter failed:', error);
    throw error;
  }
}