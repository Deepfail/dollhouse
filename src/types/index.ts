export interface Character {
  id: string;
  name: string;
  description: string;
  personality: string;
  appearance: string;
  avatar?: string;
  roomId?: string;
  
  // Stats & Progression
  stats: {
    relationship: number; // 0-100
    energy: number; // 0-100
    happiness: number; // 0-100
    experience: number;
    level: number;
  };
  
  // Customizable traits
  role: string;
  skills: string[];
  classes: string[];
  unlocks: string[];
  
  // AI Configuration
  prompts: {
    system: string;
    personality: string;
    background: string;
  };
  
  // Interaction data
  lastInteraction?: Date;
  conversationHistory: ChatMessage[];
  memories: string[];
  preferences: Record<string, any>;
  relationships: Record<string, number>; // characterId -> relationship level
  progression: {
    level: number;
    nextLevelExp: number;
    unlockedFeatures: string[];
    achievements: string[];
  };
  
  createdAt: Date;
  updatedAt: Date;
  autoGenerated?: boolean;
}

export interface Room {
  id: string;
  name: string;
  description: string;
  type: 'private' | 'shared' | 'facility';
  capacity: number;
  residents: string[]; // Character IDs
  facilities: string[];
  unlocked: boolean;
  cost?: number;
  
  // Visual customization
  theme?: string;
  decorations: string[];
  
  createdAt: Date;
}

export interface ChatMessage {
  id: string;
  characterId?: string; // undefined for user messages
  content: string;
  timestamp: Date;
  type: 'text' | 'action' | 'system' | 'image';
  metadata?: Record<string, any>;
}

export interface ChatSession {
  id: string;
  type: 'individual' | 'group' | 'scene';
  participantIds: string[]; // Character IDs
  messages: ChatMessage[];
  context?: string;
  active: boolean;
  
  // Scene mode specific
  sceneObjectives?: Record<string, string>; // characterId -> objective
  sceneSettings?: {
    autoPlay: boolean;
    turnDuration: number;
    maxTurns?: number;
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface Gift {
  id: string;
  name: string;
  description: string;
  cost: number;
  rarity: 'common' | 'rare' | 'legendary';
  effects: {
    relationship?: number;
    happiness?: number;
    energy?: number;
  };
  icon: string;
}

export interface House {
  id: string;
  name: string;
  description?: string;
  rooms: Room[];
  characters: Character[];
  currency: number;
  
  // Global settings
  worldPrompt?: string;
  copilotPrompt?: string;
  
  // Auto character creator settings
  autoCreator: {
    enabled: boolean;
    interval: number; // minutes
    maxCharacters: number;
    themes: string[];
  };
  
  // AI Configuration  
  aiSettings: {
    provider: 'openrouter';
    model: string;
    apiKey?: string;
    imageProvider: 'venice' | 'none';
    imageApiKey?: string;
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface CopilotUpdate {
  id: string;
  type: 'behavior' | 'need' | 'alert' | 'suggestion';
  characterId?: string;
  message: string;
  priority: 'low' | 'medium' | 'high';
  timestamp: Date;
  handled: boolean;
}

export interface SceneObjective {
  characterId: string;
  objective: string;
  secret: boolean;
  priority: 'low' | 'medium' | 'high';
}

export interface AutoCharacterConfig {
  themes: string[];
  personalities: string[];
  roles: string[];
  rarityWeights: {
    common: number;
    rare: number;
    legendary: number;
  };
}

export type AIModel = {
  id: string;
  name: string;
  provider: string;
  description: string;
  contextLength: number;
};

export const AVAILABLE_MODELS: AIModel[] = [
  {
    id: 'deepseek/deepseek-chat-v3.1',
    name: 'DeepSeek Chat v3.1',
    provider: 'OpenRouter',
    description: 'Latest DeepSeek Chat model v3.1',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-r1-0528',
    name: 'DeepSeek R1 (05-28)',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model (May 28th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat-v3-0324',
    name: 'DeepSeek Chat v3 (03-24)',
    provider: 'OpenRouter',
    description: 'DeepSeek Chat v3 model (March 24th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat',
    name: 'DeepSeek Chat',
    provider: 'OpenRouter',
    description: 'Standard DeepSeek model',
    contextLength: 64000
  },
  {
    id: 'openai/gpt-4o',
    name: 'GPT-4o',
    provider: 'OpenRouter', 
    description: 'OpenAI GPT-4 Omni',
    contextLength: 128000
  },
  {
    id: 'deepseek/deepseek-r1',
    name: 'DeepSeek R1',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model',
    contextLength: 64000
  }
];