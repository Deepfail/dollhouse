/* eslint-disable @typescript-eslint/no-explicit-any */
export interface Character {
  id: string;
  name: string;
  // Basic demographics
  gender?: 'female' | 'male' | 'other';
  age?: number;
  description: string;
  personality: string; // personality selection from list
  appearance: string;
  avatar?: string;
  roomId?: string;
  
  // Stats & Progression
  stats: {
    love: number; // 0-100 - how much she loves you
    happiness: number; // 0-100 - overall happiness
    wet: number; // 0-100 - how much she wants to have sex with you (combines arousal + libido)
    willing: number; // 0-100 - willingness to let you touch/have sex even if she doesn't want to
    selfEsteem: number; // 0-100 - self confidence (low = higher willing, lower fight)
    loyalty: number; // 0-100 - how loyal she is to you
    fight: number; // 0-100 - how much she will fight back against unwanted advances
    stamina: number; // 0-100 - physical/sexual endurance and energy
    pain: number; // 0-100 - how much pain and punishment she can endure
    experience: number;
    level: number;
  };
  
  // Sexual Skills
  skills: {
    hands: number; // 0-100 - handjob, stroking skills
    mouth: number; // 0-100 - blowjobs, tongue usage, facefucking
    missionary: number; // 0-100 - missionary position skills
    doggy: number; // 0-100 - doggy style skills
    cowgirl: number; // 0-100 - cowgirl position skills
  };
  
  // Customizable attributes
  role: string;
  job?: string; // Job field for grown, male, and college types
  personalities: string[]; // multiple personality traits
  features: string[]; // physical features/traits  
  classes: string[];
  unlocks: string[];
  rarity: 'common' | 'rare' | 'legendary' | 'epic';
  specialAbility?: string; // rarity-based special ability
  preferredRoomType?: string; // preferred room type based on rarity
  imageDescription?: string; // optimized physical description for image generation
  
  // Physical Stats for detailed character info
  physicalStats?: {
    hairColor: string;
    eyeColor: string;
    height: string;
    weight: string;
    skinTone: string;
  };
  
  // AI Configuration
  prompts: {
    system: string;
    personality: string;
    background: string;
  };
  
  // Relationship Dynamics (consolidated into progression)
  // relationshipDynamics: RelationshipDynamics;
  
  // Sexual Progression System (consolidated into progression)
  // sexualProgression: SexualProgression;
  
  // Interaction data
  lastInteraction?: Date;
  conversationHistory: ChatMessage[];
  memories: CharacterMemory[];
  preferences: Record<string, any>;
  relationships: Record<string, number>; // characterId -> relationship level
  behaviorProfile?: CharacterBehaviorProfile;
  progression: {
    level: number;
    nextLevelExp: number;
    unlockedFeatures: string[];
    achievements: string[];

    // Relationship progression (moved from RelationshipDynamics)
    relationshipStatus: 'stranger' | 'acquaintance' | 'friend' | 'close_friend' | 'romantic_interest' | 'lover' | 'devoted';
    affection: number; // 0-100 - how much they like the user
    trust: number; // 0-100 - how much they trust the user
    intimacy: number; // 0-100 - emotional closeness
    dominance: number; // 0-100 - how dominant/submissive they are with user
    jealousy: number; // 0-100 - how jealous they get
    possessiveness: number; // 0-100 - how possessive they are

    // Sexual progression (moved from SexualProgression)
    sexualExperience: number; // 0-100 - sexual experience level
    kinks: string[]; // list of kinks/fetishes
    limits: string[]; // hard limits
    fantasies: string[]; // sexual fantasies
    unlockedPositions: string[];
    unlockedOutfits: string[];
    unlockedToys: string[];
    unlockedScenarios: string[];

    // Milestones and events
    relationshipMilestones: RelationshipMilestone[];
    sexualMilestones: SexualMilestone[];
    significantEvents: SignificantEvent[];
    
    // Story continuity and narrative memory
    storyChronicle: StoryEntry[];
    currentStoryArc?: string;
    memorableEvents: MemorableEvent[];

    // Special bonds and compatibility
    bonds: Record<string, CharacterBond>; // characterId -> bond details
    sexualCompatibility: {
      overall: number; // 0-100
      kinkAlignment: number; // 0-100
      stylePreference: number; // 0-100
    };

    // User preferences
    userPreferences: {
      likes: string[]; // things they like about the user
      dislikes: string[]; // things they dislike
      turnOns: string[]; // what turns them on about the user
      turnOffs: string[]; // what turns them off
    };
  };
  
  createdAt: Date;
  updatedAt: Date;
  autoGenerated?: boolean;
}

export interface CharacterBehaviorProfile {
  dominantBehavior: string;
  confidence: number;
  summary: string;
  tags: string[];
  emotionalSignals: {
    affection: number;
    trust: number;
    intimacy: number;
    tension: number;
    dominance: number;
  };
  recommendedActions: string[];
  lastUpdated: Date;
  conversationHash: string;
  previousBehaviors: string[];
}

export interface CharacterBond {
  type: 'rival' | 'friend' | 'enemy' | 'lover' | 'mentor' | 'student' | 'family';
  strength: number; // 0-100
  description: string;
  createdAt: Date;
  lastInteraction?: Date;
}

export interface RelationshipEvent {
  id: string;
  type: 'first_meeting' | 'gift_given' | 'conflict' | 'intimate_moment' | 'achievement' | 'betrayal' | 'reconciliation';
  description: string;
  impact: {
    affection?: number;
    trust?: number;
    intimacy?: number;
    dominance?: number;
  };
  timestamp: Date;
}

export interface SexualProgression {
  // Core sexual stats
  arousal: number; // 0-100 - current arousal level
  libido: number; // 0-100 - base sex drive
  experience: number; // 0-100 - sexual experience level
  
  // Sexual preferences
  kinks: string[]; // list of kinks/fetishes
  limits: string[]; // hard limits
  fantasies: string[]; // sexual fantasies
  
  // Sexual skills and abilities
  skills: {
    [skillName: string]: {
      level: number; // 0-100
      experience: number;
      unlockedAt: Date;
    };
  };
  
  // Unlockable sexual content
  unlockedPositions: string[];
  unlockedOutfits: string[];
  unlockedToys: string[];
  unlockedScenarios: string[];
  
  // Sexual relationship progression
  sexualMilestones: SexualMilestone[];
  
  // Sexual compatibility with user
  compatibility: {
    overall: number; // 0-100
    kinkAlignment: number; // 0-100
    stylePreference: number; // 0-100
  };
  
  // Special sexual events/memories
  memorableEvents: MemorableEvent[];
}

export interface SexualMilestone {
  id: string;
  name: string;
  description: string;
  requiredStats: {
    love?: number;
    wet?: number;
    trust?: number;
    intimacy?: number;
  };
  rewards: {
    unlocks?: string[];
    statBoosts?: Record<string, number>;
    newContent?: string[];
  };
  achieved: boolean;
  achievedAt?: Date;
}

export interface RelationshipMilestone {
  id: string;
  name: string;
  description: string;
  requiredStats: {
    affection?: number;
    trust?: number;
    intimacy?: number;
  };
  rewards: {
    unlocks?: string[];
    statBoosts?: Record<string, number>;
    newContent?: string[];
  };
  achieved: boolean;
  achievedAt?: Date;
}

export interface SignificantEvent {
  id: string;
  type: 'first_meeting' | 'gift_given' | 'conflict' | 'intimate_moment' | 'achievement' | 'betrayal' | 'reconciliation' | 'milestone';
  description: string;
  impact: {
    affection?: number;
    trust?: number;
    intimacy?: number;
    dominance?: number;
  };
  timestamp: Date;
}

export interface SexualEvent {
  id: string;
  type: 'first_kiss' | 'first_touch' | 'first_time' | 'new_position' | 'fantasy_fulfilled' | 'milestone_reached' | 'special_moment';
  description: string;
  intensity: number; // 0-100
  satisfaction: number; // 0-100
  timestamp: Date;
  unlocks?: string[];
}

export interface StoryEntry {
  id: string;
  timestamp: Date;
  eventType: 'conversation' | 'interaction' | 'milestone' | 'gift' | 'conflict' | 'intimate' | 'achievement' | 'custom';
  title: string;
  summary: string; // AI-generated summary of what happened
  details: string; // Full narrative description for AI context
  participants: string[]; // Character IDs involved
  location?: string;
  emotions: {
    before: Record<string, number>; // emotional state before event
    after: Record<string, number>; // emotional state after event
  };
  storyArc?: string; // Optional story arc this belongs to
  significance: 'low' | 'medium' | 'high' | 'pivotal'; // How important this event is
  tags: string[]; // For filtering and searching
  relatedEvents?: string[]; // IDs of related story entries
}

export interface MemorableEvent {
  id: string;
  type: 'first_kiss' | 'first_touch' | 'first_time' | 'new_position' | 'fantasy_fulfilled' | 'milestone_reached' | 'special_moment';
  description: string;
  intensity: number; // 0-100
  satisfaction: number; // 0-100
  timestamp: Date;
  unlocks?: string[];
}

export interface SceneObjective {
  characterId: string;
  objective: string;
  secret: boolean;
  priority: 'low' | 'medium' | 'high';
}

export interface Room {
  id: string;
  name: string;
  description: string;
  type: 'private' | 'shared' | 'facility';
  capacity: number;
  residents: string[]; // Character IDs
  facilities: string[];
  unlocked: boolean;
  cost?: number;
  
  // Visual customization
  theme?: string;
  decorations: string[];
  
  createdAt: Date;
}

export interface ChatMessage {
  id: string;
  characterId?: string; // undefined for user messages
  content: string;
  timestamp: Date;
  type: 'text' | 'action' | 'system' | 'image';
  metadata?: Record<string, any>;
}

export interface ChatSession {
  id: string;
  type: 'individual' | 'group' | 'scene' | 'assistant' | 'interview';
  participantIds: string[]; // Character IDs
  messages: ChatMessage[];
  context?: string;
  active: boolean;
  messageCount?: number; // total messages in storage
  endedAt?: Date | null; // when session was closed
  // Assistant-only flag to suppress character auto generation
  assistantOnly?: boolean;
  
  // Scene mode specific
  sceneObjectives?: Record<string, string>; // characterId -> objective
  sceneSettings?: {
    autoPlay: boolean;
    turnDuration: number;
    maxTurns?: number;
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface Gift {
  id: string;
  name: string;
  description: string;
  cost: number;
  rarity: 'common' | 'rare' | 'legendary';
  effects: {
    love?: number;
    happiness?: number;
    energy?: number;
  };
  icon: string;
}

export interface House {
  id: string;
  name: string;
  description?: string;
  rooms: Room[];
  characters: Character[];
  currency: number;
  
  // Global settings
  worldPrompt?: string;
  copilotPrompt?: string;
  copilotMaxTokens?: number;
  copilotUseHouseContext?: boolean;
  copilotContextDetail?: 'lite' | 'balanced' | 'detailed';
  
  // Auto character creator settings
  autoCreator: {
    enabled: boolean;
    interval: number; // minutes
    maxCharacters: number;
    themes: string[];
  };
  
  // AI Configuration  
  aiSettings: {
    // Text/Chat AI Provider
    textProvider: 'openrouter' | 'venice' | 'anthropic' | 'openai';
    textApiKey?: string;
    textModel: string;
    textApiUrl?: string; // Custom API endpoint
    
    // Image Generation Provider (separate)
    imageProvider: 'venice' | 'openai' | 'stability' | 'none';
    imageModel?: string; // Model for image generation
    imageApiKey?: string;
    imageApiUrl?: string; // Custom API endpoint
    
    // Legacy fields for backward compatibility
    provider?: 'openrouter' | 'venice'; // @deprecated
    model?: string; // @deprecated  
    apiKey?: string; // @deprecated
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface CopilotUpdate {
  id: string;
  type: 'behavior' | 'need' | 'alert' | 'suggestion' | 'scenario';
  characterId?: string;
  message: string;
  priority: 'low' | 'medium' | 'high';
  timestamp: Date;
  handled: boolean;
  action?: {
    type: 'start_scene' | 'boost_stat' | 'custom_command';
    data?: any;
  };
}

export interface CharacterMemory {
  id: string;
  category: 'personal' | 'relationship' | 'sexual' | 'preferences' | 'events' | 'achievements';
  content: string;
  importance: 'low' | 'medium' | 'high';
  timestamp: Date;
  conversationId?: string;
  relatedStats?: Record<string, number>; // stat changes that triggered this memory
}

export interface AutoCharacterConfig {
  themes: string[];
  personalities: string[];
  roles: string[];
  rarityWeights: {
    common: number;
    rare: number;
    legendary: number;
  };
}

export type AIModel = {
  id: string;
  name: string;
  provider: string;
  description: string;
  contextLength: number;
};

export const AVAILABLE_MODELS: AIModel[] = [
  {
    id: 'deepseek/deepseek-chat-v3.1',
    name: 'DeepSeek Chat v3.1',
    provider: 'OpenRouter',
    description: 'Latest DeepSeek Chat model v3.1',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-r1-0528',
    name: 'DeepSeek R1 (05-28)',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model (May 28th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat-v3-0324',
    name: 'DeepSeek Chat v3 (03-24)',
    provider: 'OpenRouter',
    description: 'DeepSeek Chat v3 model (March 24th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat',
    name: 'DeepSeek Chat',
    provider: 'OpenRouter',
    description: 'Standard DeepSeek model',
    contextLength: 64000
  },
  {
    id: 'openai/gpt-4o',
    name: 'GPT-4o',
    provider: 'OpenRouter', 
    description: 'OpenAI GPT-4 Omni',
    contextLength: 128000
  },
  {
    id: 'deepseek/deepseek-r1',
    name: 'DeepSeek R1',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model',
    contextLength: 64000
  }
];

// Character Creation Constants
export const AVAILABLE_PERSONALITIES = [
  'flirtatious',
  'submissive',
  'teasing',
  'seductive',
  'innocent',
  'mysterious',
  'cheerful',
  'serious',
  'carefree',
  'shy',
  'unconfident',
  'hyper',
  'caring',
  'spiritual',
  'playful',
  'friendly',
  'energetic',
  'calm',
  'romantic',
  'intellectual',
  'sporty',
  'artistic',
  'conservative',
  'naive',
  'curious',
  'adventurous',
  'bold',
  'brave',
  'confident',
  'timid',
  'sweet',
  'cute',
  'adorable',
  'willing',
  'defiant',
  'proud',
  'touchy',
  'silly',
  'funny',
  'sarcastic',
  'dramatic',
  'loyal',
  'protective',
  'jealous',
  'possessive',
  'dominant',
  'submissive',
  'naughty',
  'obedient',
  'eager',
  'greedy'
];

export const AVAILABLE_ROLES = [
  'spy',
  'influencer',
  'ballet dancer',
  'cheerleader',
  'secretary',
  'nurse',
  'bookworm',
  'princess',
  'gymnast',
  'singer',
  'teacher',
  'onlyfans',
  'maid',
  'cook',
  'babysitter',
  'assistant',
  'talent scout',
  'hostess',
  'cocktail waitress',
  'tour guide',
  'counselor',
  'hacker',
  'gamer'
];

export const AVAILABLE_TRAITS = [
  'big tits',
  'big ass',
  'flat chest',
  'bouncy tits',
  'flexible',
  'no gag reflex',
  'long tongue',
  'thigh gap',
  'skinny',
  'thick',
  'twerks',
  'petite',
  'perky tits',
  'puppy dog eyes',
  'freckles',
  'huge tits',
  'juicy ass',
  'hourglass figure',
  'thicc',
  'toned'
];