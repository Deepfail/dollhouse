export interface Character {
  id: string;
  name: string;
  description: string;
  personality: string;
  appearance: string;
  avatar?: string;
  roomId?: string;
  
  // Stats & Progression
  stats: {
    relationship: number; // 0-100
    wet: number; // 0-100 (arousal/sexual desire)
    happiness: number; // 0-100
    experience: number;
    level: number;
  };
  
  // Customizable traits
  role: string;
  traits: string[]; // renamed from skills
  classes: string[];
  unlocks: string[];
  rarity: 'common' | 'rare' | 'legendary' | 'epic';
  
  // AI Configuration
  prompts: {
    system: string;
    personality: string;
    background: string;
  };
  
  // Relationship Dynamics
  relationshipDynamics: RelationshipDynamics;
  
  // Sexual Progression System
  sexualProgression: SexualProgression;
  
  // Interaction data
  lastInteraction?: Date;
  conversationHistory: ChatMessage[];
  memories: string[];
  preferences: Record<string, any>;
  relationships: Record<string, number>; // characterId -> relationship level
  progression: {
    level: number;
    nextLevelExp: number;
    unlockedFeatures: string[];
    achievements: string[];
  };
  
  createdAt: Date;
  updatedAt: Date;
  autoGenerated?: boolean;
}

export interface RelationshipDynamics {
  // Base relationship stats
  affection: number; // 0-100 - how much they like the user
  trust: number; // 0-100 - how much they trust the user
  intimacy: number; // 0-100 - emotional closeness
  dominance: number; // 0-100 - how dominant/submissive they are with user
  
  // Relationship modifiers
  jealousy: number; // 0-100 - how jealous they get
  loyalty: number; // 0-100 - how loyal they are
  possessiveness: number; // 0-100 - how possessive they are
  
  // Relationship milestones
  relationshipStatus: 'stranger' | 'acquaintance' | 'friend' | 'close_friend' | 'romantic_interest' | 'lover' | 'devoted';
  
  // Special bonds with other characters
  bonds: Record<string, CharacterBond>; // characterId -> bond details
  
  // Relationship history
  significantEvents: RelationshipEvent[];
  
  // Preferences about the user
  userPreferences: {
    likes: string[]; // things they like about the user
    dislikes: string[]; // things they dislike
    turnOns: string[]; // what turns them on about the user
    turnOffs: string[]; // what turns them off
  };
}

export interface CharacterBond {
  type: 'rival' | 'friend' | 'enemy' | 'lover' | 'mentor' | 'student' | 'family';
  strength: number; // 0-100
  description: string;
  createdAt: Date;
  lastInteraction?: Date;
}

export interface RelationshipEvent {
  id: string;
  type: 'first_meeting' | 'gift_given' | 'conflict' | 'intimate_moment' | 'achievement' | 'betrayal' | 'reconciliation';
  description: string;
  impact: {
    affection?: number;
    trust?: number;
    intimacy?: number;
    dominance?: number;
  };
  timestamp: Date;
}

export interface SexualProgression {
  // Core sexual stats
  arousal: number; // 0-100 - current arousal level
  libido: number; // 0-100 - base sex drive
  experience: number; // 0-100 - sexual experience level
  
  // Sexual preferences
  kinks: string[]; // list of kinks/fetishes
  limits: string[]; // hard limits
  fantasies: string[]; // sexual fantasies
  
  // Sexual skills and abilities
  skills: {
    [skillName: string]: {
      level: number; // 0-100
      experience: number;
      unlockedAt: Date;
    };
  };
  
  // Unlockable sexual content
  unlockedPositions: string[];
  unlockedOutfits: string[];
  unlockedToys: string[];
  unlockedScenarios: string[];
  
  // Sexual relationship progression
  sexualMilestones: SexualMilestone[];
  
  // Sexual compatibility with user
  compatibility: {
    overall: number; // 0-100
    kinkAlignment: number; // 0-100
    stylePreference: number; // 0-100
  };
  
  // Special sexual events/memories
  memorableEvents: SexualEvent[];
}

export interface SexualMilestone {
  id: string;
  name: string;
  description: string;
  requiredStats: {
    relationship?: number;
    wet?: number;
    trust?: number;
    intimacy?: number;
  };
  rewards: {
    unlocks?: string[];
    statBoosts?: Record<string, number>;
    newContent?: string[];
  };
  achieved: boolean;
  achievedAt?: Date;
}

export interface SexualEvent {
  id: string;
  type: 'first_kiss' | 'first_touch' | 'first_time' | 'new_position' | 'fantasy_fulfilled' | 'milestone_reached';
  description: string;
  intensity: number; // 0-100
  satisfaction: number; // 0-100
  timestamp: Date;
  unlocks?: string[];
}

export interface UnlockableContent {
  id: string;
  name: string;
  description: string;
  type: 'position' | 'outfit' | 'toy' | 'scenario' | 'dialogue' | 'location';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
  requirements: {
    level?: number;
    relationship?: number;
    wet?: number;
    trust?: number;
    intimacy?: number;
    achievements?: string[];
    events?: string[];
  };
  category: string;
  tags: string[];
  unlocked: boolean;
  unlockedAt?: Date;
}

export interface Room {
  id: string;
  name: string;
  description: string;
  type: 'private' | 'shared' | 'facility';
  capacity: number;
  residents: string[]; // Character IDs
  facilities: string[];
  unlocked: boolean;
  cost?: number;
  
  // Visual customization
  theme?: string;
  decorations: string[];
  
  createdAt: Date;
}

export interface ChatMessage {
  id: string;
  characterId?: string; // undefined for user messages
  content: string;
  timestamp: Date;
  type: 'text' | 'action' | 'system' | 'image';
  metadata?: Record<string, any>;
}

export interface ChatSession {
  id: string;
  type: 'individual' | 'group' | 'scene';
  participantIds: string[]; // Character IDs
  messages: ChatMessage[];
  context?: string;
  active: boolean;
  
  // Scene mode specific
  sceneObjectives?: Record<string, string>; // characterId -> objective
  sceneSettings?: {
    autoPlay: boolean;
    turnDuration: number;
    maxTurns?: number;
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface Gift {
  id: string;
  name: string;
  description: string;
  cost: number;
  rarity: 'common' | 'rare' | 'legendary';
  effects: {
    relationship?: number;
    happiness?: number;
    energy?: number;
  };
  icon: string;
}

export interface House {
  id: string;
  name: string;
  description?: string;
  rooms: Room[];
  characters: Character[];
  currency: number;
  
  // Global settings
  worldPrompt?: string;
  copilotPrompt?: string;
  copilotMaxTokens?: number;
  
  // Auto character creator settings
  autoCreator: {
    enabled: boolean;
    interval: number; // minutes
    maxCharacters: number;
    themes: string[];
  };
  
  // AI Configuration  
  aiSettings: {
    provider: 'openrouter';
    model: string;
    apiKey?: string;
    imageProvider: 'venice' | 'none';
    imageApiKey?: string;
  };
  
  createdAt: Date;
  updatedAt: Date;
}

export interface CopilotUpdate {
  id: string;
  type: 'behavior' | 'need' | 'alert' | 'suggestion';
  characterId?: string;
  message: string;
  priority: 'low' | 'medium' | 'high';
  timestamp: Date;
  handled: boolean;
}

export interface SceneObjective {
  characterId: string;
  objective: string;
  secret: boolean;
  priority: 'low' | 'medium' | 'high';
}

export interface AutoCharacterConfig {
  themes: string[];
  personalities: string[];
  roles: string[];
  rarityWeights: {
    common: number;
    rare: number;
    legendary: number;
  };
}

export type AIModel = {
  id: string;
  name: string;
  provider: string;
  description: string;
  contextLength: number;
};

export const AVAILABLE_MODELS: AIModel[] = [
  {
    id: 'deepseek/deepseek-chat-v3.1',
    name: 'DeepSeek Chat v3.1',
    provider: 'OpenRouter',
    description: 'Latest DeepSeek Chat model v3.1',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-r1-0528',
    name: 'DeepSeek R1 (05-28)',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model (May 28th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat-v3-0324',
    name: 'DeepSeek Chat v3 (03-24)',
    provider: 'OpenRouter',
    description: 'DeepSeek Chat v3 model (March 24th)',
    contextLength: 64000
  },
  {
    id: 'deepseek/deepseek-chat',
    name: 'DeepSeek Chat',
    provider: 'OpenRouter',
    description: 'Standard DeepSeek model',
    contextLength: 64000
  },
  {
    id: 'openai/gpt-4o',
    name: 'GPT-4o',
    provider: 'OpenRouter', 
    description: 'OpenAI GPT-4 Omni',
    contextLength: 128000
  },
  {
    id: 'deepseek/deepseek-r1',
    name: 'DeepSeek R1',
    provider: 'OpenRouter',
    description: 'DeepSeek R1 reasoning model',
    contextLength: 64000
  }
];